library(shiny)
library(shinyjs)
library(shinycssloaders)
library(ellmer)
library(DT)
library(dplyr)
library(KEGGREST)
library(ggplot2)
ui <- shiny::navbarPage(
# 修改图标样式
title = tags$img(src = "custom/icon.svg",
height = "55px",
style = "margin-top: 0px; margin-right: 10px;"),
id = "mainTabs",
header = tagList(
tags$head(
tags$link(href = "https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;600&display=swap",
rel = "stylesheet"),
tags$link(href = "https://fonts.googleapis.com/css2?family=Orbitron:wght@500&display=swap",
rel = "stylesheet"),
tags$style(HTML("
/* Overall modern and clean style */
body {
background-color: #ffffff;
color: #333333;
font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Helvetica, Arial, sans-serif;
margin: 0;
padding: 0;
}
/* navbar height is 60px */
.navbar {
min-height: 60px;
display: flex;
align-items: center;
}
.navbar-brand {
padding: 10px 15px;
height: 60px;
display: flex;
align-items: center;
}
/* navbar tab title bold and font size increase */
.navbar-nav > li > a {
font-weight: bold;
font-size: 18px;
padding: 15px;
line-height: 30px;
height: 60px;
display: flex;
align-items: center;
}
/* navbar tab title bold and font size increase */
.navbar-nav {
display: flex;
align-items: center;
height: 60px;
}
/* other existing styles, such as .well, button styles, etc. remain unchanged */
.well {
background: #f8f8f8 !important;
border: 1px solid #e0e0e0;
border-radius: 12px;
padding: 20px;
box-shadow: none;
}
/* set the style of the console output: text color is white, font is Arial */
#searchConsole, #aiConsole, #keggConsole, #endogenousConsole {
color: white;
font-family: Arial, sans-serif;
}
")),
tags$script(HTML("
// Helper function to update notification positions
function updateNotifications() {
var notifications = $('.shiny-notification');
var offset = 20;
notifications.each(function() {
$(this).animate({ top: offset + 'px' }, 300);
offset += $(this).outerHeight() + 10;
});
}
$(document).on('shiny:notificationShown shiny:notificationDismissed', function() {
setTimeout(updateNotifications, 100);
});
")),
tags$link(rel = "stylesheet", type = "text/css",
href = "https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css"),
tags$script(src = "https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"),
tags$script(src = "https://cdn.datatables.net/buttons/2.2.2/js/buttons.colVis.min.js"),
tags$link(rel = "stylesheet", type = "text/css",
href = "https://cdn.datatables.net/searchhighlight/1.0.1/dataTables.searchHighlight.css"),
tags$script(src = "https://cdn.datatables.net/searchhighlight/1.0.1/dataTables.searchHighlight.min.js"),
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-highlight/3.7.0/jquery.highlight.min.js"),
tags$head(tags$script(HTML('
Shiny.addCustomMessageHandler("setupConsoleScroll", function(message) {
var consoleId = message.consoleId;
var $console = $("#" + consoleId);
if ($console.length) {
function scrollToBottom() {
$console.animate({ scrollTop: $console[0].scrollHeight }, 300);
}
var observer = new MutationObserver(function(mutations) {
requestAnimationFrame(function() {
scrollToBottom();
});
});
observer.observe($console[0], {
childList: true,
subtree: true,
characterData: true
});
scrollToBottom();
}
});
')))
)
),
shinyjs::useShinyjs(),
tabPanel("0. Instructions",
fluidPage(
includeMarkdown("readme.md")
)
),
tabPanel("1. Compound Auto-search",
shiny::sidebarLayout(
sidebarPanel(
textAreaInput("compounds",
"Enter compounds for search",
rows = 10,
placeholder = "Prostaglandin E2\nProstaglandin D2\n(Enter one compound per line)"),
helpText("Please enter compound names (one per line), then click 'Start Search' to begin processing."),
helpText("The search progress will be shown on the right in the real-time console."),
div(style = "margin-top: 10px;",
checkboxInput("clearCache", "Clear cache before running", value = TRUE),
helpText("Uncheck this option to keep previous unfinished processing.")
),
shiny::actionButton("runSearch", "Start Search", class = "btn-primary")
),
mainPanel(
h4("Search Progress", style = "margin-bottom: 15px;"),
div(
id = "searchConsole",
style = "height:500px; overflow-y:auto; background: #000000;",
""
)
)
)
),
tabPanel("2. AI-assisted Identification",
fluidRow(
column(3,
wellPanel(
div(style = "margin-bottom: 20px;",
shiny::actionButton("loadLocalResults", "Load Local Results",
class = "btn-info",
style = "width: 100%;"),
helpText("Load previous results from Step 1 if available.")
),
# AI model selection
radioButtons("model",
"Select AI Model (Not Recommend Reasoner Models!!)",
choices = c("deepseek", "gpt-4o-mini")),
# New textAreaInput for AI Identification Prompt (Optional)
textAreaInput("ai_prompt",
"AI Identification Prompt (Optional)",
value = "For non-lipid compounds, the following cases should be considered the same compound:\n1) Suffixes \"-ate\" and \"acid\" are equivalent (e.g., \"Methylmalonate\" and \"Methylmalonic acid\");\n2) Ignore naming variations (e.g., trans/E, allo/alpha, etc.);\n3) DL/D/L configurations are equivalent;\n4) Prefixes \"methyl\" or \"phosphoric acid\" are equivalent;\n5) \"alpha\" equals Greek letter alpha, \"beta\" equals Greek letter beta, \"gamma\" equals Greek letter gamma, but distinguish alpha/beta/gamma forms!;\n6) Tautomers are equivalent;\n7) Resonance structures are equivalent;\n8) Hydrates or solvates are equivalent (e.g., CuSO4 and CuSO4_5H2O);\n9) Different ionization states are equivalent;\n10) Different salt forms are equivalent (e.g., sodium and potassium salts);\n11) Isotope variants are equivalent (unless specified);\n20) Inorganic and organic forms of the same compound are equivalent.\n\nFor lipid compounds, carefully check structural differences. For example, LPC(13:0) and LPC 18:1 should be considered different compounds due to different carbon chain lengths and saturation.\n\nAlways carefully compare oxidation states and structural positions!\nProstaglandin compounds (e.g., PGE2, PGD2) should be strictly distinguished based on their core structure and functional groups!",
rows = 8),
helpText("This optional prompt will be sent to the AI."),
textInput("custom_api_url",
"Custom API URL (Optional)",
placeholder = "e.g., https://api.deepseek.com"),
textInput("custom_model_name",
"Custom Model Name (Optional) (Not Recommend Reasoner Models!!)",
placeholder = "e.g., deepseek-chat"),
passwordInput("apikey",
"Enter API Key",
placeholder = "Your personal API key"),
div(style = "margin-bottom: 20px;",
checkboxInput("clearCurrentModel",
"Delete current model results",
value = FALSE),
helpText("Check to clear all current model results before starting.")
),
shiny::actionButton("runAI", "Start AI Identification", class = "btn-primary")
)
),
column(9,
div(
style = "background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);",
h4("AI Identification Results", style = "margin-bottom: 15px;"),
helpText("Review the AI-identified candidate compounds below. You can adjust the selection for each compound."),
DT::DTOutput("aiResultsTable"),
div(
style = "margin-top: 20px; text-align: right;",
shiny::actionButton("confirmAIResults",
"Confirm Selection and Continue",
class = "btn-success btn-lg")
)
),
div(
style = "margin-top: 20px; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);",
h4("AI Identification Log", style = "margin-bottom: 15px;"),
div(
id = "aiConsole",
style = "height: 200px; overflow-y: auto; background: #000000; padding: 10px; border-radius: 5px;",
""
)
)
)
)
),
tabPanel("3. Endogenous Check",
fluidRow(
column(12,
div(
style = "background: #fff3cd; color: #856404; padding: 15px; border-radius: 5px; margin-bottom: 20px;",
icon("exclamation-triangle"),
"Warning: HMDB website connection may be unstable. Please use HMDB endogenous check with caution."
)
)
),
fluidRow(
column(12,
wellPanel(
h4("Load Local Final Results"),
p("Load the final compound results saved locally."),
shiny::actionButton("loadFinalResults", "Load Local Final Results",
class = "btn-info", style = "width: 100%;")
)
)
),
fluidRow(
column(6,
wellPanel(
h4("HMDB Endogenous Check"),
p("Check endogenous status using HMDB database."),
shiny::actionButton("runHMDBCheck", "Start HMDB Check",
class = "btn-warning",
style = "width: 100%;")
)
),
column(6,
wellPanel(
h4("mzCloud Endogenous Check"),
p("Check endogenous status using mzCloud database."),
shiny::actionButton("runMzCloudCheck", "Start mzCloud Check",
class = "btn-info",
style = "width: 100%;")
)
)
),
fluidRow(
column(12,
div(
style = "margin-top: 20px;",
h4("Check Progress"),
div(
id = "endogenousConsole",
style = "height: 300px; overflow-y: auto; background: #000000; padding: 10px; border-radius: 5px;",
""
),
div(
style = "margin-top: 20px; text-align: right;",
shiny::actionButton("confirmEndogenous",
"Confirm and Continue",
class = "btn-success btn-lg")
)
)
)
)
),
tabPanel("4. Processed Results View",
fluidPage(
h4("Final Processed Results", style = "margin-bottom: 15px;"),
helpText("Review the final processed compound results. If you are satisfied with them, click 'Next' to proceed to KEGG Database & Processing."),
div(
style = "margin-bottom: 20px;",
shiny::actionButton("refreshResults",
"Refresh Results",
icon = icon("sync"),
class = "btn-info")
),
div(
style = "margin-bottom: 10px;",
tags$em("Last updated: "),
textOutput("lastUpdateTime", inline = TRUE)
),
DT::DTOutput("finalResultsTable"),
div(
style = "margin-top: 20px; text-align: right;",
shiny::actionButton("nextFromProcessed", "Next", class = "btn-success btn-lg")
)
)
),
tabPanel("5. KEGG Database & Processing",
shiny::sidebarLayout(
sidebarPanel(
div(style = "margin-bottom: 20px;",
shiny::actionButton("loadKeggLocalResults", "Load Local Results",
class = "btn-info",
style = "width: 100%;"),
helpText("Load previously saved KEGG analysis results if available.")
),
selectizeInput(
"keggSpecies",
"Select Species",
choices = NULL,
selected = NULL,
options = list(
placeholder = 'Select a species',
onInitialize = I('function() { this.setValue(""); }')
)
),
radioButtons("pathwayLevel",
"Select Pathway Analysis Level:",
choices = c(
"Pathway Name (81 KEGG pathways)" = "pathway_name",
"Pathway Class (13 pathway categories)" = "pathway_class"
),
selected = "pathway_name"),
div(
id = "speciesLoadingIndicator",
style = "display: none;",
tags$span(class = "loading-spinner"),
"Loading species data..."
),
helpText("Select the species and pathway analysis level then click 'Start KEGG Analysis'."),
shiny::actionButton("runKegg", "Start KEGG Analysis", class = "btn-primary")
),
mainPanel(
h4("KEGG Analysis Progress", style = "margin-bottom: 15px;"),
div(
id = "keggConsole",
style = "height:300px; overflow-y:auto; background: #000000;",
""
),
h4("Pathway Enrichment Results", style = "margin-top: 20px;"),
downloadButton("downloadKEGGBubblePlot", "Download Bubble Plot (PPTX)", class = "btn-success"),
plotOutput("pathwayBubblePlot", height = "600px")
)
)
),
tabPanel("6. Report Download",
fluidPage(
h4("Report Download", style = "margin-top: 20px;"),
p("Click the button below to generate a Processing Report (PDF format), which contains the processing and results of each section, so that you can easily understand how the system works."),
downloadButton("downloadReport", "Generate Processing Report", class = "btn-success")
)
)
)
View(ui)
library(httr)
# 定义目标URL
url <- "https://csbg.cnb.csic.es/mbrole3/analysis.php"
# 准备表单数据
form_data <- list(
compound_ids = "5744\t9788\t969096\t91458\t11653\t6654\t90634",  # 填入你的化合物ID，用制表符分隔
input_type = "PubChem",  # 选择PubChem作为输入类型
annotations = "GO:0000001,GO:0000002",  # 选择你想分析的注释（根据网页的选项）
background = "organism-dependent",  # 选择背景集
submit = "Enrichment analysis"  # 提交按钮的名称
)
# 发送POST请求
response <- POST(url, body = form_data, encode = "form")
# 检查响应
if (status_code(response) == 200) {
cat("请求成功！结果如下：\n")
content(response, "text")
} else {
cat("请求失败，状态码：", status_code(response), "\n")
}
status_code(response)
a <- content(response, "text")
library(RSelenium)
# 启动 Selenium 服务器（需要提前安装 ChromeDriver）
# 确保 ChromeDriver 已安装并路径正确
driver <- rsDriver(browser = "chrome", port = 4444L, verbose = FALSE)
remote_driver <- driver$client
